1
2

*----------------------------------------------------------------------
PASOS PARA CREAR CERTIFICADO PARA ADMINISTRADOR REPOSITORIO
*----------------------------------------------------------------------
Cambio del 31-oct-2012
Se añadieron páginas de internet con tutoriales de Git

Cambio del 26-oct-2012: 
Se añadieron los pasos para usar un workflow basado en rebase en vez de commit.
La idea en general es que sólo se le envíe un commit a Araceli y ella lo aplique.
Los commits se puede compactar y enviárseles a Araceli por correo. 



GitHub accounts
	isc28240
		Ya generé la llave pública y privada. 
	fcintrono
		Ya generé la llave pública y privada

1.- Instalar Putty.
2.- Actualizar a GitExtensions 2.41
3.- Crear cuenta en GitHub




/***********************************************/
Conectarse a GitHub
/***********************************************/
1.- En cada cliente Remotes->Generate or import key
	a.- Generate
	b.- Escribir password de la llave primaria
	c.- Confirmar password de la llave primaria
	d.- Save private key
	e.- Save public key
2.- Entrar a github.com
	a.- Crear cuenta para desarrollo. 
	b.- Crear repositorio. 
	c.- Cargar llave publica Settings->SSH Key
		1.- Abrir el archivo de llave privada generada en el paso1. 
		2.- Copiar el contenido del recuadro  que dice public key. 
		

	
LA forma de trabajo es esta: 
		1.- El repositorio maestro puede ser leído por todo mundo. 
			a) sólo puede ser escrito por el administrador(Araceli)
			b) los cambios se mandan usando correos o si estas en la LAN usando el directorios compartidos de windows
			c) Se usa la interfaz gráfica para aplicar los cambios o si también se puede usar la línea de comandos.

La mecánica es esta: 

The fundamental idea of rebasing is that you make sure that your commits go on top of the "public" branch, 
that you "rebase" them so that instead of being related to some commit way back when you started working on this feature, 
they get reworked a little so they go on top of what's there now.



1.- No trabajes en la MASTER POR NADA DEL MUNDO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!. 
2.- Todos los cambios se hacen en su propio branch, de preferencia de un cambio relacionado con el branch. 
3.- Si tienes varios commits hacerles rebase contra el repositorio maestro para dejar un sólo commit.
4.- Cambiarse a master y hacer un pull del repositorio maestro. 
5.- Cambiarse al branch de la característica que ahora tiene un sólo commit.
6.- HAcer rebase del branch de la característica contra el repositorio maestro. 
7.- Formatear un parche con el único commit que quedó. 
8.- Enviarlo por correo a Araceli. 
9.- Araceli: Aplicar el parche en master. 
10.- Araceli: Subir el cambio al repositorio maestro. 
11.- Bajar los últimos cambios del repo maestro a nuestro master. 
12.- Cambiarnos al branch de la característica y dar un último rebase contra el repo maestro. 

--------------------------------------------------------------------------
LIGAS CON INFORMACIÓN ADICIONAL.
--------------------------------------------------------------------------
http://blog.mikepearce.net/2010/05/18/the-difference-between-git-pull-git-fetch-and-git-clone-and-git-rebase/
http://unethicalblogger.com/2010/04/02/a-rebase-based-workflow.html
http://drupal.org/node/1054616
http://randyfay.com/content/rebase-workflow-git
http://eagain.net/articles/git-for-computer-scientists/
http://www-cs-students.stanford.edu/~blynn/gitmagic/		MUY BUENO

----------------------------------------------------------------------
FIN
-----------------------------------------------------------------------



1
2
3

4
5
6
7
8